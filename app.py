import streamlit as st
import pandas as pd
from supabase import create_client
import bcrypt
from datetime import datetime, timezone, timedelta
import random
import uuid
import base64
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_JUSTIFY
from reportlab.pdfgen import canvas
from reportlab.platypus.flowables import HRFlowable
import io
from PIL import Image as PILImage

# --- Conex√£o com Supabase ---
SUPABASE_URL = st.secrets["supabase"]["url"]
SUPABASE_KEY = st.secrets["supabase"]["key"]
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# --- Configura√ß√£o inicial do app ---
st.set_page_config(page_title="CoteF√°cil Sa√∫de", layout="centered")

limite = (datetime.now(timezone.utc) - timedelta(minutes=20)).isoformat()
supabase.table("usuarios") \
    .update({"sessao_ativa": False, "sessao_token": None}) \
    .eq("sessao_ativa", True) \
    .lt("ultima_atividade", limite) \
    .execute()

def get_base64_of_image(image_path):
    with open(image_path, "rb") as img_file:
        return base64.b64encode(img_file.read()).decode()
    
img_base64 = get_base64_of_image("cotefacil.jpg")

# --- Estilo CSS ---
st.markdown(
    f"""
    <style>
    .stApp {{
        background-image: linear-gradient(rgba(255,255,255,0.8), rgba(255,255,255,0.8)), url("data:image/png;base64,{img_base64}");
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
    }}
    </style>
    """,
    unsafe_allow_html=True
)

# --- Fun√ß√£o para gerar PDF ---
def gerar_pdf_cotacao(plano_info, idades_pessoas, data_cotacao):
    """
    Gera um PDF profissional com as informa√ß√µes da cota√ß√£o do plano
    """
    buffer = io.BytesIO()
    
    # Criar o documento PDF
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=72,
        leftMargin=72,
        topMargin=72,
        bottomMargin=18,
    )
    
    # Container para os elementos
    elements = []
    
    # Estilos
    styles = getSampleStyleSheet()
    
    # Estilo personalizado para t√≠tulo
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        textColor=colors.HexColor('#0a66c2'),
        spaceAfter=30,
        alignment=TA_CENTER,
        bold=True
    )
    
    # Estilo para subt√≠tulos
    subtitle_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Heading2'],
        fontSize=16,
        textColor=colors.HexColor('#0a66c2'),
        spaceAfter=12,
        spaceBefore=12,
        bold=True
    )
    
    # Estilo para texto normal
    normal_style = ParagraphStyle(
        'CustomNormal',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=12,
        alignment=TA_JUSTIFY
    )
    
    # Adicionar cabe√ßalho
    elements.append(Paragraph("CoteF√°cil Sa√∫de", title_style))
    elements.append(Paragraph("Cota√ß√£o de Plano de Sa√∫de", styles['Heading2']))
    elements.append(Spacer(1, 0.2*inch))
    
    # Linha horizontal
    elements.append(HRFlowable(width="100%", thickness=1, color=colors.HexColor('#0a66c2')))
    elements.append(Spacer(1, 0.2*inch))
    
    # Informa√ß√µes da cota√ß√£o
    elements.append(Paragraph("üìã Informa√ß√µes da Cota√ß√£o", subtitle_style))
    
    # Tabela de informa√ß√µes b√°sicas
    info_data = [
        ['Data da Cota√ß√£o:', data_cotacao],
        ['N√∫mero de Benefici√°rios:', str(len(idades_pessoas))],
        ['Idades dos Benefici√°rios:', ', '.join([str(idade) + ' anos' for idade in idades_pessoas])],
    ]
    
    info_table = Table(info_data, colWidths=[2.5*inch, 4*inch])
    info_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f0f2f6')),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
        ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 11),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
    ]))
    
    elements.append(info_table)
    elements.append(Spacer(1, 0.3*inch))
    
    # Informa√ß√µes do plano
    elements.append(Paragraph("üè• Detalhes do Plano", subtitle_style))
    
    plano_data = [
        ['Empresa:', plano_info.get('Empresa', 'N/A')],
        ['Tipo de Plano:', plano_info.get('Tipo', 'N/A')],
        ['Abrang√™ncia:', plano_info.get('Abrang√™ncia', 'N/A')],
        ['Validade:', plano_info.get('Validade', 'N/A')],
    ]
    
    plano_table = Table(plano_data, colWidths=[2.5*inch, 4*inch])
    plano_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f0f2f6')),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
        ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 11),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
    ]))
    
    elements.append(plano_table)
    elements.append(Spacer(1, 0.3*inch))
    
    # Valores
    elements.append(Paragraph("üí∞ Valores", subtitle_style))
    
    valores_data = [
        ['Valor Total:', plano_info.get('Total', 'N/A')],
        ['M√©dia per capita:', plano_info.get('M√©dia per capita', 'N/A')],
        ['Detalhamento:', plano_info.get('Detalhe pre√ßos', 'N/A')],
    ]
    
    valores_table = Table(valores_data, colWidths=[2.5*inch, 4*inch])
    valores_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f0f2f6')),
        ('BACKGROUND', (1, 0), (1, 0), colors.HexColor('#e8f5e9')),  # Destaque no valor total
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
        ('FONTNAME', (1, 0), (1, -1), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 11),
        ('FONTSIZE', (1, 0), (1, 0), 12),  # Valor total maior
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
    ]))
    
    elements.append(valores_table)
    elements.append(Spacer(1, 0.4*inch))
    
    # Informa√ß√µes importantes
    elements.append(Paragraph("‚ÑπÔ∏è Informa√ß√µes Importantes", subtitle_style))
    
    # Explica√ß√£o sobre o tipo de plano
    tipo_plano = plano_info.get('Tipo', '')
    
    if 'Coparticipa√ß√£o Parcial' in tipo_plano:
        explicacao = """
        <b>Coparticipa√ß√£o Parcial:</b> Este plano cobre a maioria dos procedimentos m√©dicos. 
        Voc√™ pagar√° apenas uma parte dos custos de consultas ou exames, conforme estabelecido 
        no contrato. √â uma op√ß√£o equilibrada entre mensalidade e custos por utiliza√ß√£o.
        """
    elif 'Coparticipa√ß√£o Total' in tipo_plano:
        explicacao = """
        <b>Coparticipa√ß√£o Total:</b> Neste plano, voc√™ paga integralmente por cada procedimento 
        realizado (consultas, exames simples), mas o plano oferece cobertura completa para 
        interna√ß√µes e exames de alto custo. Ideal para quem usa pouco o plano no dia a dia.
        """
    elif 'Enfermaria' in tipo_plano:
        explicacao = """
        <b>Plano Enfermaria:</b> Em caso de interna√ß√£o, a acomoda√ß√£o ser√° em quarto coletivo 
        (enfermaria), geralmente compartilhado com 2 ou mais pacientes. Oferece toda a 
        cobertura m√©dica necess√°ria com um custo mais acess√≠vel.
        """
    elif 'Apartamento' in tipo_plano:
        explicacao = """
        <b>Plano Apartamento:</b> Em caso de interna√ß√£o, voc√™ ter√° direito a quarto individual 
        (apartamento), garantindo maior privacidade e conforto. Permite tamb√©m a presen√ßa de 
        acompanhante, conforme regras do plano.
        """
    else:
        explicacao = """
        Este plano oferece cobertura conforme as normas da ANS (Ag√™ncia Nacional de Sa√∫de 
        Suplementar), garantindo acesso aos procedimentos obrigat√≥rios estabelecidos pela 
        regulamenta√ß√£o vigente.
        """
    
    elements.append(Paragraph(explicacao, normal_style))
    elements.append(Spacer(1, 0.3*inch))
    
    # Observa√ß√µes finais
    elements.append(HRFlowable(width="100%", thickness=0.5, color=colors.grey))
    elements.append(Spacer(1, 0.2*inch))
    
    obs_style = ParagraphStyle(
        'ObsStyle',
        parent=styles['Normal'],
        fontSize=9,
        textColor=colors.grey,
        alignment=TA_CENTER
    )
    
    elements.append(Paragraph(
        "Esta cota√ß√£o √© v√°lida por 5 dias √∫teis a partir da data de emiss√£o. "
        "Os valores podem sofrer altera√ß√µes sem aviso pr√©vio. "
        "Para contratar, entre em contato com nossos consultores.",
        obs_style
    ))
    
    elements.append(Paragraph(
        "CoteF√°cil Sa√∫de - Facilitando suas escolhas em sa√∫de",
        obs_style
    ))
    
    # Construir PDF
    doc.build(elements)
    buffer.seek(0)
    
    return buffer

# --- Fun√ß√µes auxiliares ---
def formatar_validade(yyyymm):
    meses_pt = {
        "01": "Janeiro", "02": "Fevereiro", "03": "Mar√ßo", "04": "Abril",
        "05": "Maio", "06": "Junho", "07": "Julho", "08": "Agosto",
        "09": "Setembro", "10": "Outubro", "11": "Novembro", "12": "Dezembro"
    }
    try:
        ano, mes = yyyymm.split('-')
        nome_mes = meses_pt.get(mes.zfill(2), mes)
        return f"{nome_mes} de {ano}"
    except:
        return yyyymm


def idade_na_faixa(idade, faixa_etaria):
    if '+' in faixa_etaria:
        return idade >= int(faixa_etaria.replace('+', '').strip())
    faixa = list(map(int, faixa_etaria.split('-')))
    return faixa[0] <= idade <= faixa[1]


def atualizar_sessao(username):
    agora = datetime.now(timezone.utc).isoformat()
    supabase.table("usuarios").update({
        "sessao_ativa": True,
        "ultima_atividade": agora
    }).eq("username", username).execute()


# --- Tela de redefini√ß√£o de senha ---
def tela_reset_senha():
    st.title("Redefinir Senha")
    email = st.text_input("Digite seu e-mail cadastrado")
    if st.button("Enviar nova senha"):
        result = supabase.table("usuarios").select("*").eq("email", email).execute()
        user_data = result.data
        if not user_data:
            st.error("E-mail n√£o encontrado.")
        else:
            nova_senha = ''.join(random.choices("abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789", k=8))
            hash = bcrypt.hashpw(nova_senha.encode(), bcrypt.gensalt()).decode()
            supabase.table("usuarios").update({
                "password_hash": hash,
                "sessao_ativa": False
            }).eq("email", email).execute()
            st.success(f"Sua nova senha tempor√°ria √©: **{nova_senha}**. Altere ap√≥s o login.")

def agora_iso():
    return datetime.now(timezone.utc).isoformat()

def gerar_token():
    return uuid.uuid4().hex

def marcar_login(supabase, username):
    token = gerar_token()
    supabase.table("usuarios").update({
        "sessao_ativa": True,
        "sessao_token": token,
        "ultima_atividade": agora_iso(),
    }).eq("username", username).execute()
    return token

def marcar_logout(supabase, username):
    supabase.table("usuarios").update({
        "sessao_ativa": False,
        "sessao_token": None
    }).eq("username", username).execute()

def checar_sessao_unica(supabase, username, token_local):
    """Retorna True se a sess√£o ainda √© v√°lida neste dispositivo."""
    res = supabase.table("usuarios").select("sessao_token,sessao_ativa").eq("username", username).single().execute()
    if not res.data:
        return False
    row = res.data
    if not row.get("sessao_ativa"):
        return False
    return (row.get("sessao_token") == token_local)

def heartbeat(supabase, username):
    """Atualiza o timestamp para controle de inatividade/limpeza."""
    supabase.table("usuarios").update({
        "ultima_atividade": agora_iso()
    }).eq("username", username).execute()

if st.session_state.get("logged_in"):
    valido = checar_sessao_unica(
        supabase,
        st.session_state["username"],
        st.session_state.get("sessao_token")
    )
    if not valido:
        st.error("Sua sess√£o foi encerrada porque houve login em outro dispositivo.")
        st.session_state.clear()
        st.rerun()
    else:
        heartbeat(supabase, st.session_state["username"])

# --- Tela de login ---
def login():
    
    st.title("Login - CoteF√°cil Sa√∫de")
    username = st.text_input("Usu√°rio")
    password = st.text_input("Senha", type="password")

    entrar = st.button("Entrar")

    st.markdown(
        """
        <div style="background-color:#f0f2f6;padding:20px;border-radius:10px;margin-bottom:30px;">
            <h4 style="margin-top:0;">Compare os principais planos de sa√∫de em um s√≥ lugar.<br>
            <span style="color:#0a66c2;">R√°pido, f√°cil e 100% online.</span></h4>
            <ul style="list-style: none; padding-left: 0;">
                <li>‚úîÔ∏è Sem planilhas</li>
                <li>‚úîÔ∏è Sem confus√£o</li>
                <li>‚úîÔ∏è S√≥ as melhores op√ß√µes pra voc√™</li>
            </ul>
            <p style="font-weight:bold;color:#0a66c2;">CoteF√°cil Sa√∫de ‚Äî sua escolha, sem complica√ß√£o.</p>
        </div>
        """,
        unsafe_allow_html=True
    )

    limite = (datetime.now() - timedelta(minutes=20)).isoformat()

    supabase.table("usuarios") \
        .update({"sessao_ativa": False}) \
        .eq("sessao_ativa", True) \
        .lt("ultima_atividade", limite) \
        .execute()
    if entrar:
        if not username or not password:
            st.warning("Por favor, preencha todos os campos.")
            return

        result = supabase.table("usuarios").select("*").eq("username", username).execute()
        data = result.data

        if not data:
            st.error("Usu√°rio n√£o encontrado.")
            return

        user = data[0]
        if bcrypt.checkpw(password.encode(), user["password_hash"].encode()):
            if user.get("sessao_ativa"):
                st.error("Este usu√°rio j√° est√° com uma sess√£o ativa em outro dispositivo.")
                return

            atualizar_sessao(username)

            st.session_state["logged_in"] = True
            st.session_state["username"] = username
            token = marcar_login(supabase, username)
            st.session_state["sessao_token"] = token
            st.rerun()
        else:
            st.error("Senha incorreta.")

# --- Controle de telas ---
if st.session_state.get("tela") == "reset":
    tela_reset_senha()
    st.stop()

if "logged_in" not in st.session_state or not st.session_state["logged_in"]:
    login()
    st.stop()

# --- Conte√∫do principal ---
st.title("CoteF√°cil Sa√∫de")
st.sidebar.success(f"Logado como: {st.session_state['username']}")
if st.sidebar.button("Sair"):
    marcar_logout(supabase, st.session_state["username"])
    st.session_state.clear()
    st.rerun()

# --- Entrada do usu√°rio ---
st.markdown("### Cota√ß√£o de Planos de Sa√∫de")
qtd = st.number_input("Quantas pessoas ser√£o inclu√≠das?", min_value=1, max_value=10, step=1, value=1)

# Campos de idade din√¢micos
idades = []
cols_idades = st.columns(min(qtd, 4))
for i in range(qtd):
    col = cols_idades[i % 4]
    with col:
        idade_i = st.number_input(f"Idade da pessoa {i+1}", min_value=0, max_value=120, step=1, key=f"idade_{i}")
        idades.append(int(idade_i))

# Filtro de faixa de pre√ßo
faixa_de_preco = st.slider(
    "Filtro por **m√©dia per capita (R$)** - Valor por cada pessoa inclu√≠da no plano",
    min_value=100.0, max_value=4000.0,
    value=(100.0, 4000.0), step=1.0
)

# Carrega dados
df = pd.read_excel("planos_de_saude_unificado.xlsx", engine="openpyxl")

# Filtros de Tipo
st.markdown("### Tipo de Plano")
tipos_disponiveis = sorted(df["Tipo"].dropna().unique().tolist())
cols_tipo = st.columns(len(tipos_disponiveis) if tipos_disponiveis else 1)
tipos_selecionados = []
for i, tipo in enumerate(tipos_disponiveis):
    if cols_tipo[i].checkbox(tipo, value=True, key=f"tipo_{i}"):
        tipos_selecionados.append(tipo)
if not tipos_selecionados:
    tipos_selecionados = tipos_disponiveis[:]

# Filtros de Empresa
st.markdown("### Empresa")
empresas = sorted(df["Empresa"].dropna().unique().tolist())
cols_emp = st.columns(len(empresas) if empresas else 1)
empresas_selecionadas = []
for i, emp in enumerate(empresas):
    if cols_emp[i].checkbox(emp, value=True, key=f"emp_{i}"):
        empresas_selecionadas.append(emp)
if not empresas_selecionadas:
    empresas_selecionadas = empresas[:]

def idade_na_faixa(idade, faixa):
    faixa = str(faixa).strip()
    if '+' in faixa:
        return idade >= int(faixa.replace('+', '').strip())
    faixa = faixa.replace('a', '-').replace('A', '-').replace(' ', '')
    ini, fim = faixa.split('-')
    return int(ini) <= idade <= int(fim)

# Normaliza Validade
val_raw = df["Validade"].astype(str).str.strip()
df["_val_dt"] = pd.to_datetime(val_raw + "-01", errors="coerce")
hoje_m = pd.to_datetime(datetime.now().strftime("%Y-%m") + "-01")

# Aplica filtros b√°sicos
df_base = df[
    df["Tipo"].isin(tipos_selecionados) &
    df["Empresa"].isin(empresas_selecionadas)
].copy()

# Monta cota√ß√£o por plano
grupos = ["Empresa", "Tipo", "Abrang√™ncia", "Validade", "_val_dt", "Associado"]
resultados = []
for chave, bloco in df_base.groupby(grupos):
    empresa, tipo, abr, validade, val_dt, assoc = chave
    precos = []
    ok = True
    for idade in idades:
        match = bloco[bloco["Idade"].apply(lambda x: idade_na_faixa(idade, x))]
        if match.empty:
            ok = False
            break
        preco = match.iloc[0]["Pre√ßo"]
        if pd.isna(preco):
            ok = False
            break
        precos.append(float(preco))
    if not ok:
        continue

    total = sum(precos)
    media = total / len(idades) if idades else 0.0
    resultados.append({
        "Empresa": empresa,
        "Tipo": tipo,
        "Abrang√™ncia": abr,
        "Validade": validade,
        "_val_dt": val_dt,
        "Total": total,
        "M√©dia per capita": media,
        "Detalhe pre√ßos": " + ".join([f"R\\$ {p:,.2f}".replace(",", "v").replace(".", ",").replace("v", ".") for p in precos])
    })

# Bot√£o de cota√ß√£o
if st.button("Fazer cota√ß√£o"):
    atualizar_sessao(st.session_state["username"])

    if not resultados:
        st.warning("Nenhum plano atende a todas as idades informadas com os filtros atuais.")
    else:
        df_cot = pd.DataFrame(resultados)

        # Filtra pela m√©dia per capita
        df_cot = df_cot[
            (df_cot["M√©dia per capita"] >= faixa_de_preco[0]) &
            (df_cot["M√©dia per capita"] <= faixa_de_preco[1])
        ]

        if df_cot.empty:
            st.warning("Nenhum plano dentro da faixa de **m√©dia per capita** selecionada.")
        else:
            # Ordena do maior ao menor pela m√©dia per capita
            df_cot = df_cot.sort_values("M√©dia per capita", ascending=False)

            # Formata valores para exibi√ß√£o
            df_cot_fmt = df_cot.copy()
            
            # Guarda os valores originais antes de formatar
            df_cot_fmt["_total_original"] = df_cot_fmt["Total"]
            df_cot_fmt["_media_original"] = df_cot_fmt["M√©dia per capita"]
            
            df_cot_fmt["Total"] = df_cot_fmt["Total"].apply(lambda x: f"R\\$ {x:,.2f}".replace(",", "v").replace(".", ",").replace("v", "."))
            df_cot_fmt["M√©dia per capita"] = df_cot_fmt["M√©dia per capita"].apply(lambda x: f"R\\$ {x:,.2f}".replace(",", "v").replace(".", ",").replace("v", "."))
            
            # Formata Validade
            meses_pt = {
                "01": "Janeiro", "02": "Fevereiro", "03": "Mar√ßo", "04": "Abril",
                "05": "Maio", "06": "Junho", "07": "Julho", "08": "Agosto",
                "09": "Setembro", "10": "Outubro", "11": "Novembro", "12": "Dezembro"
            }
            def formatar_validade(yyyymm):
                try:
                    ano, mes = str(yyyymm).split("-")
                    return f"{meses_pt.get(mes.zfill(2), mes)} de {ano}"
                except:
                    return yyyymm
            df_cot_fmt["Validade"] = df_cot_fmt["Validade"].astype(str).str.strip().apply(formatar_validade)

            # Separa vencidos x v√°lidos
            vencidos_mask = df_cot["_val_dt"].notna() & (df_cot["_val_dt"] < hoje_m)
            df_validos = df_cot_fmt.loc[~vencidos_mask]
            df_vencidos = df_cot_fmt.loc[vencidos_mask]

            # Exibir planos v√°lidos com bot√µes de PDF
            st.markdown("### ‚úÖ Planos v√°lidos")
            
            if not df_validos.empty:
                # Para cada plano v√°lido, criar uma linha com informa√ß√µes e bot√£o PDF
                for idx, row in df_validos.iterrows():
                    with st.container():
                        col1, col2 = st.columns([5, 1])
                        
                        with col1:
                            st.markdown(f"""
                            **{row['Empresa']} - {row['Tipo']}**  
                            üìç {row['Abrang√™ncia']} | üìÖ {row['Validade']}  
                            üí∞ **Total:** {row['Total']} | **Per capita:** {row['M√©dia per capita']}  
                            üë• **Valores individuais:** {row['Detalhe pre√ßos']}
                            """)
                        
                        with col2:
                            # Preparar dados para o PDF
                            plano_pdf_info = {
                                'Empresa': row['Empresa'],
                                'Tipo': row['Tipo'],
                                'Abrang√™ncia': row['Abrang√™ncia'],
                                'Validade': row['Validade'],
                                'Total': row['Total'],
                                'M√©dia per capita': row['M√©dia per capita'],
                                'Detalhe pre√ßos': row['Detalhe pre√ßos']
                            }

                            for key, value in plano_pdf_info.items():
                                if isinstance(value, str):
                                    plano_pdf_info[key] = value.replace('R\\$', 'R$')
                                else:
                                    plano_pdf_info[key] = value
                            
                            # Gerar PDF
                            pdf_buffer = gerar_pdf_cotacao(
                                plano_pdf_info, 
                                idades,
                                datetime.now().strftime("%d/%m/%Y")
                            )
                            
                            # Bot√£o de download
                            nome_arquivo = f"cotacao_{row['Empresa'].replace(' ', '_')}_{row['Tipo'].replace(' ', '_')}.pdf"
                            st.download_button(
                                label="üìÑ PDF",
                                data=pdf_buffer,
                                file_name=nome_arquivo,
                                mime="application/pdf",
                                key=f"pdf_{idx}"
                            )
                        
                        st.divider()

            # Exibir planos vencidos (se houver)
            if not df_vencidos.empty:
                st.warning("‚ö†Ô∏è Os planos abaixo perderam a validade e ser√£o atualizados.")
                
                for idx, row in df_vencidos.iterrows():
                    with st.container():
                        col1, col2 = st.columns([5, 1])
                        
                        with col1:
                            st.markdown(f"""
                            **{row['Empresa']} - {row['Tipo']}** *(VENCIDO)*  
                            üìç {row['Abrang√™ncia']} | üìÖ ~~{row['Validade']}~~  
                            üí∞ **Total:** {row['Total']} | **Per capita:** {row['M√©dia per capita']}  
                            üë• **Valores individuais:** {row['Detalhe pre√ßos']}
                            """)
                        
                        with col2:
                            st.button("‚è≥ Vencido", disabled=True, key=f"vencido_{idx}")
                        
                        st.divider()

            # Explica√ß√µes
            st.markdown("""
            ### üîç Entenda a Coparticipa√ß√£o
            - **Coparticipa√ß√£o Parcial:** o plano cobre a maioria dos procedimentos, e voc√™ paga apenas uma parte de consultas ou exames.
            - **Coparticipa√ß√£o Total:** voc√™ paga integralmente por cada procedimento realizado, com o plano oferecendo apenas cobertura de interna√ß√£o e exames de alto custo.

            ### üõèÔ∏è Enfermaria x Apartamento
            - **Enfermaria:** quarto coletivo, geralmente com 2 ou mais pacientes.
            - **Apartamento:** quarto individual, com maior privacidade e conforto.
            
            ### üìÑ Gerando PDFs
            Clique no bot√£o **üìÑ PDF** ao lado de cada plano para baixar uma cota√ß√£o detalhada em PDF.
            """)